### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum AgeRangeEnum {
  above_fortyfive
  eighteen_to_twentyfour
  thirtyfive_to_fortyfour
  twentyfive_to_thirtyfour
  under_18
}

type AthleteBio {
  events_count: Int
  follower_count: Int
  image_url: String
  name: String
  posts_count: Int
}

type AthleteData {
  description: String
  id: Int
  image_url: String
  incentives: [String]
  name: String
  sport: String
}

type AuthData {
  athlete_bio: AthleteBio
  athlete_data: [AthleteData]
  athletes: [AthleteData]
  completion_status: String
  content_data: [UserContent]
  email: String
  incentives: [String]
  max_id: Int
  products: [Products]
  sales: [Sales]
  signed_url: String
  sports: [String]
  suggestions: [SuggestionsData]
  token: String
  top_followers: [TopFollowers]
}

enum GenderEnum {
  female
  male
  nonbinary
  other
}

type Mutation {
  add_content(caption: String!, category: String!, end_time: String, media_url: String, start_time: String): MutationResponse!
  athlete_signin(email: String!, password: String!): MutationResponse!
  athlete_signup(country: String!, email: String!, name: String!, password: String!, phone: String!, sport: String!): MutationResponse!
  athlete_update_info(description: String!, image_url: String!): MutationResponse!
  create_poll(caption: String!, days: Int, hours: Int, media_url: String, options: [String!]!): MutationResponse!
  create_post(caption: String!, media_url: String): MutationResponse!
  create_product(currency: String, media_url: String, name: String!, price: Float!, quantity: Int!): MutationResponse!
  create_sale(caption: String!, end_time: String, media_url: String, product_id: [Int]!): MutationResponse!
  interests(athletes: [Int]!, incentives: [String]!, notifications_preference: [String]!, sports: [String]!): MutationResponse!
  s3_upload(file_name: String!): MutationResponse!
  signin(email: String!, password: String!): MutationResponse!
  signup(age_range: AgeRangeEnum, email: String!, gender: GenderEnum, name: String!, password: String!, phone: String!): MutationResponse!
  user_follow_athlete(athlete_id: Int!): MutationResponse!
  waitlist(email: String!): MutationResponse!
}

type MutationResponse {
  data: AuthData
  error: Boolean!
  message: String!
  status: Int!
}

type Products {
  currency: String
  media_url: String
  name: String
  price: Float
  quantity: Int
}

type Query {
  athletes(limit: Int!, next_min_id: Int, sports: [String]!): MutationResponse!
  fetch_athlete_basics: MutationResponse!
  fetch_athlete_sales: MutationResponse!
  fetch_athlete_top_followers: MutationResponse!
  fetch_products: MutationResponse!
  fetch_user_content(athlete_select_id: Int, limit: Int!, live_events: Boolean, next_min_id: Int): MutationResponse!
  fetch_user_suggestions: MutationResponse!
  user_fetch_incentives: MutationResponse!
  user_fetch_sports: MutationResponse!
}

type Sales {
  month: String
  total_sales: Float
  year: Int
}

type SuggestionsData {
  id: Int
  image_url: String
  name: String
  sport: String
}

type TopFollowers {
  email: String
  id: Int
  name: String
}

type UserContent {
  athlete_image_url: String
  athlete_name: String
  content_caption: String
  content_media_url: String
  distance: String
}