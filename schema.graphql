### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum AgeRangeEnum {
  above_fortyfive
  eighteen_to_twentyfour
  thirtyfive_to_fortyfour
  twentyfive_to_thirtyfour
  under_18
}

type AthleteData {
  description: String
  display_name: String
  id: Int
  image_url: String
  incentives: [String]
  sport: String
}

type AuthData {
  athlete_data: [AthleteData]
  athletes: [AthleteData]
  completion_status: String
  content_data: [UserContent]
  email: String
  incentives: [String]
  max_id: Int
  sports: [String]
  token: String
}

enum GenderEnum {
  female
  male
  nonbinary
  other
}

type Mutation {
  add_content(caption: String!, media_url: String): MutationResponse!
  athlete_signin(email: String!, password: String!): MutationResponse!
  athlete_signup(display_name: String!, email: String!, incentives: [String]!, name: String!, password: String!, phone: String!, sports: [String]!): MutationResponse!
  interests(athletes: [Int]!, incentives: [String]!, sports: [String]!): MutationResponse!
  signin(email: String!, password: String!): MutationResponse!
  signup(age_range: AgeRangeEnum, email: String!, gender: GenderEnum, name: String!, password: String!, phone: String!): MutationResponse!
  waitlist(email: String!): MutationResponse!
}

type MutationResponse {
  data: AuthData
  error: Boolean!
  message: String!
  status: Int!
}

type Query {
  athletes(limit: Int!, next_min_id: Int, sports: [String]!): MutationResponse!
  fetch_user_content(limit: Int!, next_min_id: Int): MutationResponse!
  user_fetch_incentives: MutationResponse!
  user_fetch_sports: MutationResponse!
}

type UserContent {
  athlete_display_name: String
  athlete_image_url: String
  content_caption: String
  content_media_url: String
}